# .github/workflows/main.yml
name: Trading Bot Workflow

# --------------------------------------------------------------------------
#  WORKFLOW TRIGGERS
#  Defines when this workflow runs.
# --------------------------------------------------------------------------
on:
  # 1. Runs on a schedule
  schedule:
    # Runs daily before market open (e.g., 8:30 AM IST which is 3:00 UTC) to generate a new access token.
    - cron: '0 3 * * 1-5'
    # Runs weekly on Sunday at 5:30 AM UTC to retrain the AI model
    - cron: '30 5 * * 0'

  # 2. Allows manual runs from the GitHub Actions UI
  workflow_dispatch:
    inputs:
      run_token_generation:
        description: 'Manually generate a new access token?'
        required: false
        type: boolean
      run_retraining:
        description: 'Manually run AI model retraining?'
        required: false
        type: boolean

# --------------------------------------------------------------------------
#  CONCURRENCY CONTROL
#  Ensures only one instance of this workflow runs at a time.
#  This prevents race conditions and duplicate trading signals.
# --------------------------------------------------------------------------
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# --------------------------------------------------------------------------
#  JOBS
#  The workflow is split into sequential jobs.
# --------------------------------------------------------------------------
jobs:
  # ========================================================================
  #  JOB 1: Generate a fresh daily access token for Kite Connect
  # ========================================================================
  generate-token:
    name: "üîë Generate & Store Kite Access Token"
    # This job runs on the daily schedule OR if manually triggered
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '0 3 * * 1-5') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_token_generation)
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Fail fast if token generation gets stuck

    steps:
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: "Cache Pip Dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Create a new cache if requirements files change
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Install Automation Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-automation.txt

      - name: "Install System Dependencies for Headless Chrome"
        run: |
          # Headless Chrome on Linux requires these system libraries to run.
          sudo apt-get update
          # The libgconf-2-4 package is obsolete in newer Ubuntu versions.
          # This updated list provides the necessary modern dependencies for headless Chrome.
          sudo apt-get install -y libnss3 libnspr4 libgbm1 libfontconfig1

      - name: "ü§ñ Run Automated Token Generation"
        id: token_generator
        env:
          KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
          KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
          KITE_USER_ID: ${{ secrets.KITE_USER_ID }}
          KITE_PASSWORD: ${{ secrets.KITE_PASSWORD }}
          KITE_TOTP_SECRET: ${{ secrets.KITE_TOTP_SECRET }}
        run: |
          # Exit on error and fail if any command in a pipeline fails.
          set -eo pipefail
          
          echo "::group::Generating new access token"
          # Run the script and capture its standard output (the token).
          NEW_TOKEN=$(python automate_token_generation.py)
          echo "::endgroup::"

          if [ -z "$NEW_TOKEN" ]; then
            echo "::error::Failed to generate new access token. Script output was empty."
            exit 1
          fi

          # Securely mask the token in logs and set it as an output
          echo "::add-mask::$NEW_TOKEN"
          echo "NEW_TOKEN=$NEW_TOKEN" >> "$GITHUB_ENV"
          echo "Successfully generated and masked a new access token."

      - name: "üîê Update Secret in Google Secret Manager"
        if: success()
        # The 'gcloud-cli' action was having resolution issues.
        # This is a more fundamental approach: set up the CLI first, then run the command.
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Execute Secret Update"
        if: success()
        run: |
          echo "Updating KITE_ACCESS_TOKEN in Secret Manager..."
          echo -n "${{ env.NEW_TOKEN }}" | gcloud secrets versions add KITE_ACCESS_TOKEN --data-file=- --project=${{ steps.auth.outputs.project_id }}
          echo "Secret updated successfully."
      - name: "Upload Debug Artifacts on Failure"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-artifacts
          path: |
            error_screenshot.png
            error_page_source.html

  # ========================================================================
  #  JOB 3: Retrain the AI model weekly to keep it updated
  # ========================================================================
  retrain-model:
    name: "üß† Retrain AI Model"
    # This job runs only on the Sunday schedule OR if manually triggered with the specific input.
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '30 5 * * 0') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_retraining)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "üìä Prepare Training Data"
        env:
          GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        run: python api/prepare_training_data.py

      - name: "ü§ñ Train New AI Model"
        run: python api/train_model.py

      - name: "Commit and Push Updated Model"
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(AI): Automatically retrain and update AI model"
          file_pattern: "api/trading_model.pkl api/confusion_matrix.png api/feature_importance.png"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
