# .github/workflows/main.yml
name: Trading Bot Workflow

# --------------------------------------------------------------------------
#  WORKFLOW TRIGGERS
# --------------------------------------------------------------------------
on:
  schedule:
    # Daily token generation
    - cron: '0 3 * * 1-5'
    # Weekly AI model retraining
    - cron: '30 5 * * 0'
  workflow_dispatch:
    inputs:
      run_token_generation:
        description: 'Manually generate a new access token?'
        type: boolean
      run_retraining:
        description: 'Manually run AI model retraining?'
        type: boolean
      run_data_collection:
        description: 'Manually run data collection & signal generation?'
        type: boolean
      run_sheet_setup:
        description: 'Manually initialize/fix Google Sheet structure?'
        type: boolean

# --------------------------------------------------------------------------
#  CONCURRENCY CONTROL
# --------------------------------------------------------------------------
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# --------------------------------------------------------------------------
#  JOBS
# --------------------------------------------------------------------------
jobs:
  # ========================================================================
  #  JOB 1: Generate Kite Access Token
  # ========================================================================
  generate-token:
    name: "üîë Generate & Store Kite Access Token"
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '0 3 * * 1-5') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_token_generation)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: "Cache Pip Dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install Automation Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-automation.txt
      - name: "Install System Dependencies for Headless Chrome"
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libnspr4 libgbm1 libfontconfig1
      - name: "ü§ñ Run Automated Token Generation"
        id: token_generator
        env:
          KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
          KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
          KITE_USER_ID: ${{ secrets.KITE_USER_ID }}
          KITE_PASSWORD: ${{ secrets.KITE_PASSWORD }}
          KITE_TOTP_SECRET: ${{ secrets.KITE_TOTP_SECRET }}
        run: |
          set -eo pipefail
          echo "::group::Generating new access token"
          NEW_TOKEN=$(python automate_token_generation.py)
          echo "::endgroup::"
          if [ -z "$NEW_TOKEN" ]; then
            echo "::error::Failed to generate new access token. Script output was empty."
            exit 1
          fi
          echo "::add-mask::$NEW_TOKEN"
          echo "NEW_TOKEN=$NEW_TOKEN" >> "$GITHUB_ENV"
          echo "Successfully generated and masked a new access token."
      - name: 'üîê Authenticate to Google Cloud'
        if: success()
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: 'Setup Google Cloud SDK'
        if: success()
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: "Execute Secret Update"
        if: success()
        run: |
          echo "Updating KITE_ACCESS_TOKEN in Secret Manager..."
          echo -n "${{ env.NEW_TOKEN }}" | gcloud secrets versions add KITE_ACCESS_TOKEN --data-file=- --project=my-trading-platform-471103
          echo "Secret updated successfully."
      - name: "Upload Debug Artifacts on Failure"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-artifacts
          path: |
            error_screenshot.png
            error_page_source.html

  # ========================================================================
  #  JOB 2: Manually run data collection
  # ========================================================================
  collect-data:
    name: "üìà Run Data Collection"
    needs: generate-token
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '0 3 * * 1-5') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_data_collection)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 'üîê Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Setup Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Fetch Kite Access Token from Secret Manager"
        id: get_token
        run: |
          echo "Fetching KITE_ACCESS_TOKEN from Secret Manager..."
          TOKEN=$(gcloud secrets versions access latest --secret=KITE_ACCESS_TOKEN --project=my-trading-platform-471103)
          echo "::add-mask::$TOKEN"
          echo "TOKEN=$TOKEN" >> "$GITHUB_ENV"

      - name: "Checkout Code"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "üìä Run Data Collection Script"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
          KITE_ACCESS_TOKEN: ${{ env.TOKEN }}
        run: python run_manual_collection.py

  # ========================================================================
  #  JOB 4: Prepare Training Data
  # ========================================================================
  prepare-training-data:
    name: "üß† (1/2) Prepare Training Data"
    # This job no longer needs to depend on generate-token
    if: |
      (github.event_name == 'schedule' && github.event.schedule == '30 5 * * 0') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_retraining)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 'üîê Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Setup Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Checkout Code"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "üìä Run Data Preparation Script"
        id: prepare_data
        run: python api/prepare_training_data.py
      - name: "Check if Data Was Prepared"
        if: steps.prepare_data.outputs.data_prepared != 'true'
        run: |
          echo "::error::No training data was prepared. Halting workflow."
          exit 1
      - name: "üì¶ Upload Training Data as Artifact"
        if: steps.prepare_data.outputs.data_prepared == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: training-data-csv
          path: api/training_data.csv
          if-no-files-found: error

  # ========================================================================
  #  JOB 5: Retrain AI Model
  # ========================================================================
  retrain-ai-model:
    name: "üß† (2/2) Retrain AI Model"
    needs: prepare-training-data
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "üì• Download Training Data Artifact"
        uses: actions/download-artifact@v4
        with:
          name: training-data-csv
          path: api/
      - name: "ü§ñ Train New AI Model"
        run: python api/train_model.py
      - name: "Commit and Push Updated Model"
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(AI): Automatically retrain and update AI model"
          file_pattern: "api/trading_model.pkl api/confusion_matrix.png api/feature_importance.png"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

  # ========================================================================
  #  JOB 6: Validate Model
  # ========================================================================
  validate-model:
    name: "‚öôÔ∏è Validate New Model with Backtest"
    needs: retrain-ai-model
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 'üîê Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Setup Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "Run Backtest with New Model"
        run: python backtest.py
