name: Live AI Trading System

on:
  schedule:
    - cron: '*/10 4-10 * * 1-5'  # Every 10 minutes during market hours
    - cron: '*/5 * * * *'  # Every 5 minutes for testing
  workflow_dispatch:

jobs:
  trading:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install minimal dependencies
      run: |
        pip install requests python-dotenv
    
    - name: Check market and send signal
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      run: |
        python3 -c "
        import requests
        import os
        from datetime import datetime
        import random
        
        # Check if market is open (simplified - always run for testing)
        now = datetime.now()
        utc_hour = now.hour
        ist_hour = (utc_hour + 5) % 24  # UTC to IST conversion
        
        # For testing: always generate signals during weekdays
        is_weekday = now.weekday() < 5
        
        print(f'UTC: {utc_hour}:00, IST: {ist_hour}:00, Weekday: {is_weekday}')
        
        if not is_weekday:
            print('Weekend - no trading')
            exit(0)
        
        # Generate mock signal
        symbols = ['NIFTY', 'BANKNIFTY', 'SENSEX', 'FINNIFTY', 'NIFTYIT']
        symbol = random.choice(symbols)
        strike = random.choice([25000, 25050, 25100]) if symbol == 'NIFTY' else random.choice([48000, 48100, 48200])
        option_type = random.choice(['CE', 'PE'])
        entry_price = random.randint(80, 200)
        confidence = random.randint(75, 95)
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        admin_id = '1375236879'
        
        # Enhanced channel format
        targets = [int(entry_price * 1.05), int(entry_price * 1.10), int(entry_price * 1.15)]
        stoploss = int(entry_price * 0.85)
        
        message = f'''🚀 <b>TRADE ALERT</b>

📊 <b>{symbol} {strike} {option_type}</b>

💰 <b>BUY NOW</b>
🎯 <b>Entry:</b> ₹{entry_price}

🎆 <b>TARGETS:</b>
T1: ₹{targets[0]} (5%)
T2: ₹{targets[1]} (10%)
T3: ₹{targets[2]} (15%)

🛑 <b>Stoploss:</b> ₹{stoploss}

🤖 <b>AI Confidence:</b> {confidence}%
⏰ <b>Time:</b> {datetime.now().strftime('%H:%M:%S')}

📲 <b>Join:</b> @DATradingSignals
⚠️ <i>For educational purposes only</i>''''
        
        url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
        
        # Send to channel first
        channel_response = requests.post(url, json={'chat_id': '@DATradingSignals', 'text': message, 'parse_mode': 'HTML'})
        
        # Send to admin
        admin_response = requests.post(url, json={'chat_id': admin_id, 'text': message, 'parse_mode': 'HTML'})
        
        print(f'Channel: {channel_response.status_code}, Admin: {admin_response.status_code}')
        print(f'Channel response: {channel_response.text[:100] if channel_response.text else "No response"}')
        print(f'Admin response: {admin_response.text[:100] if admin_response.text else "No response"}')
        
        # Also send debug info
        debug_msg = f'🔧 DEBUG: Workflow ran at {datetime.now().strftime("%H:%M:%S")} UTC'
        requests.post(url, json={'chat_id': admin_id, 'text': debug_msg})
        "